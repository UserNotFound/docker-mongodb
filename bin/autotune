#!/usr/bin/env python

import sys
import os

# NOTE: pipes.quote is deprecated in 2.7, if upgrading to 3.x, use shlex.quote
from pipes import quote

CACHE_SIZE_PARAM = '--wiredTigerCacheSizeGB'


def generate_config(mongo_version, ram_mb):
    if mongo_version < (3, 2):
        return []

    cache_size_mb = max(
        ram_mb / 2,
        0.6 * ram_mb - 1024
    )

    if mongo_version >= (3, 3, 5):
        # We can use a float here https://jira.mongodb.org/browse/SERVER-23624
        cache_size_gb = round(float(cache_size_mb) / 1024, 2)
        return [CACHE_SIZE_PARAM, str(cache_size_gb)]

    cache_size_gb = int(cache_size_mb / 1024)
    if cache_size_gb > 0:
        return [CACHE_SIZE_PARAM, str(cache_size_gb)]

    return []


def main():
    raw_version = os.environ['MONGO_VERSION']
    mongo_version = tuple(int(x) for x in raw_version.split('.'))
    ram_mb = int(os.environ.get('APTIBLE_CONTAINER_SIZE', '1024'))

    config = generate_config(mongo_version, ram_mb)
    print ' '.join(quote(param) for param in config)


def test():
    test_cases = [
        [(2, 6, 11), 1024, []],

        [(3, 2, 17), 0.5 * 1024, []],
        [(3, 2, 17), 1024, []],
        [(3, 2, 17), 2 * 1024, [CACHE_SIZE_PARAM, '1']],
        [(3, 2, 17), 4 * 1024, [CACHE_SIZE_PARAM, '2']],
        [(3, 2, 17), 7 * 1024, [CACHE_SIZE_PARAM, '3']],
        [(3, 2, 17), 7 * 1024, [CACHE_SIZE_PARAM, '3']],
        [(3, 2, 17), 15 * 1024, [CACHE_SIZE_PARAM, '8']],

        [(3, 4, 10), 1024, [CACHE_SIZE_PARAM, '0.5']],
        [(3, 4, 10), 2 * 1024, [CACHE_SIZE_PARAM, '1.0']],
        [(3, 4, 10), 4 * 1024, [CACHE_SIZE_PARAM, '2.0']],
        [(3, 4, 10), 7 * 1024, [CACHE_SIZE_PARAM, '3.5']],
        [(3, 4, 10), 7 * 1024, [CACHE_SIZE_PARAM, '3.5']],
        [(3, 4, 10), 15 * 1024, [CACHE_SIZE_PARAM, '8.0']],
    ]

    for version, size, expected_config in test_cases:
        prefix = "MongoDB {0} at {1}GB".format(
            '.'.join(str(x) for x in version), size / 1024
        )

        real_config = generate_config(version, size)

        m = "{0}: configuration differs\n  Got: {1}\n  Expected: {2}".format(
            prefix, real_config, expected_config
        )
        assert real_config == expected_config, m

    sys.stderr.write("OK\n")


def usage(program):
    sys.stderr.write("Usage: {0} [--test]\n".format(program))


if __name__ == '__main__':
    if len(sys.argv) == 1:
        main()
    elif len(sys.argv) == 2 and sys.argv[1] == '--test':
        test()
    else:
        usage(sys.argv[0])
